diff -r 57713c1cc334 Ice/IceFPU.h
--- a/Ice/IceFPU.h	Mon Aug 27 12:59:13 2012 +0200
+++ b/Ice/IceFPU.h	Mon Aug 27 13:02:25 2012 +0200
@@ -41,20 +41,7 @@
 	//! Fast square root for floating-point values.
 	inline_ float FastSqrt(float square)
 	{
-#ifdef _MSC_VER
-			float retval;
-
-			__asm {
-					mov             eax, square
-					sub             eax, 0x3F800000
-					sar             eax, 1
-					add             eax, 0x3F800000
-					mov             [retval], eax
-			}
-			return retval;
-#else
-			return sqrt(square);
-#endif
+		return sqrt(square);
 	}
 
 	//! Saturates positive to zero.
@@ -182,118 +169,29 @@
 		return x*x < epsilon;
 	}
 
-	#define FCOMI_ST0	_asm	_emit	0xdb	_asm	_emit	0xf0
-	#define FCOMIP_ST0	_asm	_emit	0xdf	_asm	_emit	0xf0
-	#define FCMOVB_ST0	_asm	_emit	0xda	_asm	_emit	0xc0
-	#define FCMOVNB_ST0	_asm	_emit	0xdb	_asm	_emit	0xc0
-
-	#define FCOMI_ST1	_asm	_emit	0xdb	_asm	_emit	0xf1
-	#define FCOMIP_ST1	_asm	_emit	0xdf	_asm	_emit	0xf1
-	#define FCMOVB_ST1	_asm	_emit	0xda	_asm	_emit	0xc1
-	#define FCMOVNB_ST1	_asm	_emit	0xdb	_asm	_emit	0xc1
-
-	#define FCOMI_ST2	_asm	_emit	0xdb	_asm	_emit	0xf2
-	#define FCOMIP_ST2	_asm	_emit	0xdf	_asm	_emit	0xf2
-	#define FCMOVB_ST2	_asm	_emit	0xda	_asm	_emit	0xc2
-	#define FCMOVNB_ST2	_asm	_emit	0xdb	_asm	_emit	0xc2
-
-	#define FCOMI_ST3	_asm	_emit	0xdb	_asm	_emit	0xf3
-	#define FCOMIP_ST3	_asm	_emit	0xdf	_asm	_emit	0xf3
-	#define FCMOVB_ST3	_asm	_emit	0xda	_asm	_emit	0xc3
-	#define FCMOVNB_ST3	_asm	_emit	0xdb	_asm	_emit	0xc3
-
-	#define FCOMI_ST4	_asm	_emit	0xdb	_asm	_emit	0xf4
-	#define FCOMIP_ST4	_asm	_emit	0xdf	_asm	_emit	0xf4
-	#define FCMOVB_ST4	_asm	_emit	0xda	_asm	_emit	0xc4
-	#define FCMOVNB_ST4	_asm	_emit	0xdb	_asm	_emit	0xc4
-
-	#define FCOMI_ST5	_asm	_emit	0xdb	_asm	_emit	0xf5
-	#define FCOMIP_ST5	_asm	_emit	0xdf	_asm	_emit	0xf5
-	#define FCMOVB_ST5	_asm	_emit	0xda	_asm	_emit	0xc5
-	#define FCMOVNB_ST5	_asm	_emit	0xdb	_asm	_emit	0xc5
-
-	#define FCOMI_ST6	_asm	_emit	0xdb	_asm	_emit	0xf6
-	#define FCOMIP_ST6	_asm	_emit	0xdf	_asm	_emit	0xf6
-	#define FCMOVB_ST6	_asm	_emit	0xda	_asm	_emit	0xc6
-	#define FCMOVNB_ST6	_asm	_emit	0xdb	_asm	_emit	0xc6
-
-	#define FCOMI_ST7	_asm	_emit	0xdb	_asm	_emit	0xf7
-	#define FCOMIP_ST7	_asm	_emit	0xdf	_asm	_emit	0xf7
-	#define FCMOVB_ST7	_asm	_emit	0xda	_asm	_emit	0xc7
-	#define FCMOVNB_ST7	_asm	_emit	0xdb	_asm	_emit	0xc7
-
 	//! A global function to find MAX(a,b) using FCOMI/FCMOV
 	inline_ float FCMax2(float a, float b)
 	{
-#ifdef _MSC_VER
-		float Res;
-		_asm	fld		[a]
-		_asm	fld		[b]
-		FCOMI_ST1
-		FCMOVB_ST1
-		_asm	fstp	[Res]
-		_asm	fcomp
-		return Res;
-#else
 		return (a > b) ? a : b;
-#endif
 	}
 
 	//! A global function to find MIN(a,b) using FCOMI/FCMOV
 	inline_ float FCMin2(float a, float b)
 	{
-#ifdef _MSC_VER
-		float Res;
-		_asm	fld		[a]
-		_asm	fld		[b]
-		FCOMI_ST1
-		FCMOVNB_ST1
-		_asm	fstp	[Res]
-		_asm	fcomp
-		return Res;
-#else
+
 		return (a < b) ? a : b;
-#endif
 	}
 
 	//! A global function to find MAX(a,b,c) using FCOMI/FCMOV
 	inline_ float FCMax3(float a, float b, float c)
 	{
-#ifdef _MSC_VER
-		float Res;
-		_asm	fld		[a]
-		_asm	fld		[b]
-		_asm	fld		[c]
-		FCOMI_ST1
-		FCMOVB_ST1
-		FCOMI_ST2
-		FCMOVB_ST2
-		_asm	fstp	[Res]
-		_asm	fcompp
-		return Res;
-#else
 		return (a > b) ? ((a > c) ? a : c) : ((b > c) ? b : c);
-#endif
 	}
 
 	//! A global function to find MIN(a,b,c) using FCOMI/FCMOV
 	inline_ float FCMin3(float a, float b, float c)
 	{
-#ifdef _MSC_VER
-		float Res;
-		_asm	fld		[a]
-		_asm	fld		[b]
-		_asm	fld		[c]
-		FCOMI_ST1
-		FCMOVNB_ST1
-		FCOMI_ST2
-		FCMOVNB_ST2
-		_asm	fstp	[Res]
-		_asm	fcompp
-		return Res;
-#else
 		return (a < b) ? ((a < c) ? a : c) : ((b < c) ? b : c);
-#endif
 	}
 
 	inline_ int ConvertToSortable(float f)
diff -r 57713c1cc334 Ice/IceMemoryMacros.h
--- a/Ice/IceMemoryMacros.h	Mon Aug 27 12:59:13 2012 +0200
+++ b/Ice/IceMemoryMacros.h	Mon Aug 27 13:02:25 2012 +0200
@@ -54,20 +54,7 @@
 		//
 		//	2) for(udword i=0;i<nb;i++)	dest[i] = value;
 		//
-#ifdef _MSC_VER
-		_asm push eax
-		_asm push ecx
-		_asm push edi
-		_asm mov edi, dest
-		_asm mov ecx, nb
-		_asm mov eax, value
-		_asm rep stosd
-		_asm pop edi
-		_asm pop ecx
-		_asm pop eax
-#else
 		while(nb--) *dest++ = value;
-#endif
 	}
 
 	//!	Copies a buffer.
