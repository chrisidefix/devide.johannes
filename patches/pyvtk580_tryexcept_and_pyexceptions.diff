diff --git a/Common/vtkPythonCommand.cxx b/Common/vtkPythonCommand.cxx
index 2b1b82b..782d8ea 100644
--- a/Common/vtkPythonCommand.cxx
+++ b/Common/vtkPythonCommand.cxx
@@ -64,6 +64,13 @@ void vtkPythonCommand::Execute(vtkObject *ptr, unsigned long eventtype,
 #endif
 #endif
 
+  // we save the error indicator here so that we can restore at at the end
+  // because event handlers (for example a ProgressEvent) can be called
+  // at any time and by default reset the error indicator, thus zeroing
+  // any previously set exceptions (cpbotha)
+  PyObject *atype, *avalue, *atraceback;
+  PyErr_Fetch(&atype, &avalue, &atraceback);
+
   // If a threadstate has been set using vtkPythonCommand::SetThreadState,
   // then swap it in here.  See the email to vtk-developers@vtk.org from
   // June 18, 2009 with subject "Py_NewInterpreter and vtkPythonCallback issue"
@@ -173,6 +180,9 @@ void vtkPythonCommand::Execute(vtkObject *ptr, unsigned long eventtype,
     PyThreadState_Swap(prevThreadState);
     }
 
+  // restore error indicator (cpbotha)
+  PyErr_Restore(atype, avalue, atraceback);
+
 #ifndef VTK_NO_PYTHON_THREADS
 #if (PY_MAJOR_VERSION > 2) || \
 ((PY_MAJOR_VERSION == 2) && (PY_MINOR_VERSION >= 3))
diff --git a/Wrapping/Python/vtkPythonUtil.cxx b/Wrapping/Python/vtkPythonUtil.cxx
index d5e7f80..d2d195a 100644
--- a/Wrapping/Python/vtkPythonUtil.cxx
+++ b/Wrapping/Python/vtkPythonUtil.cxx
@@ -19,6 +19,7 @@
 #include "vtkSystemIncludes.h"
 
 #include "vtkObject.h"
+#include "vtkOutputWindow.h"
 #include "vtkSmartPointerBase.h"
 #include "vtkWeakPointerBase.h"
 #include "vtkVariant.h"
@@ -84,6 +85,109 @@ class vtkPythonSpecialTypeMap
 {
 };
 
+// .NAME vtkPythonOutputWindow - output window to transform VTK error
+//                               messages to Python exceptions
+// .SECTION Description
+// The Python wrappings set an instance of this class to be the output
+// window.  When any VTK code makes use of e.g. vtkErrorMacro or
+// vtkWarningMacro, this class will turn the error message into a
+// Python RuntimeError exception and a warning into a Python
+// RuntimeWarning.  Debug text will be displayed with the Python
+// 'print' command.  VTK errors and warnings can now be handled in a
+// far more Pythonic way.
+//
+//  -- Charl P. Botha <http://cpbotha.net/>
+class vtkPythonOutputWindow : public vtkOutputWindow
+{
+public:
+  static vtkPythonOutputWindow *New() {
+    return new vtkPythonOutputWindow(); };
+
+  virtual void DisplayText(const char*);
+  virtual void DisplayErrorText(const char*);
+  virtual void DisplayWarningText(const char*);
+  virtual void DisplayGenericWarningText(const char*);
+  virtual void DisplayDebugText(const char*);
+
+protected:
+  vtkPythonOutputWindow() {};
+  ~vtkPythonOutputWindow() {};
+
+private:
+  vtkPythonOutputWindow(const vtkPythonOutputWindow&);  //Not implemented
+  void operator=(const vtkPythonOutputWindow&);  //Not implemented
+};
+
+void vtkPythonOutputWindow::DisplayText(const char* message)
+{
+  char command[4097]; // extra for 0-termination
+
+  // we have to do it this way to:
+  // 1. handle directory slashes correctly
+  // 2. handle EOLs correctly
+  snprintf(command, 4096, "import os; print os.path.normpath(r\"\"\"%s\"\"\")", 
+          message);
+
+#ifndef VTK_NO_PYTHON_THREADS
+#if (PY_MAJOR_VERSION > 2) || \
+((PY_MAJOR_VERSION == 2) && (PY_MINOR_VERSION >= 3))
+  PyGILState_STATE state = PyGILState_Ensure();
+#endif
+#endif
+ 
+  PyRun_SimpleString(command);
+
+#ifndef VTK_NO_PYTHON_THREADS
+#if (PY_MAJOR_VERSION > 2) || \
+((PY_MAJOR_VERSION == 2) && (PY_MINOR_VERSION >= 3))
+  PyGILState_Release(state);
+#endif
+#endif
+}
+
+void vtkPythonOutputWindow::DisplayErrorText(const char* message)
+{ 
+
+#ifndef VTK_NO_PYTHON_THREADS
+#if (PY_MAJOR_VERSION > 2) || \
+((PY_MAJOR_VERSION == 2) && (PY_MINOR_VERSION >= 3))
+  PyGILState_STATE state = PyGILState_Ensure();
+#endif
+#endif
+
+  if (!PyErr_Occurred())
+    PyErr_SetString(PyExc_RuntimeError, message);
+
+#ifndef VTK_NO_PYTHON_THREADS
+#if (PY_MAJOR_VERSION > 2) || \
+((PY_MAJOR_VERSION == 2) && (PY_MINOR_VERSION >= 3))
+  PyGILState_Release(state);
+#endif
+#endif
+}
+
+void vtkPythonOutputWindow::DisplayWarningText(const char* message)
+{ 
+  // one could have considered setting a PyExc_RuntimeWarning, but
+  // this causes all VTK warnings (usually non-critical conditions) to
+  // trigger Python exceptions that terminate the whole program flow.
+  this->DisplayText(message);
+}
+
+void vtkPythonOutputWindow::DisplayGenericWarningText(const char* message)
+{ 
+  // one could have considered setting a PyExc_RuntimeWarning, but
+  // this causes all VTK warnings (usually non-critical conditions) to
+  // trigger Python exceptions that terminate the whole program flow.
+  this->DisplayText(message);
+}
+
+void vtkPythonOutputWindow::DisplayDebugText(const char* message)
+{ 
+  this->DisplayText(message);
+}
+
+
 
 //--------------------------------------------------------------------
 // The singleton for vtkPythonUtil
@@ -104,6 +208,11 @@ vtkPythonUtil::vtkPythonUtil()
   this->GhostMap = new vtkPythonGhostMap;
   this->ClassMap = new vtkPythonClassMap;
   this->SpecialTypeMap = new vtkPythonSpecialTypeMap;
+
+  // set the vtkPythonOutputWindow as the singleton instance
+  vtkPythonOutputWindow *ow = vtkPythonOutputWindow::New();
+  ow->SetInstance(ow);
+  ow->Delete();
 }
 
 //--------------------------------------------------------------------
diff --git a/Wrapping/vtkWrapPython.c b/Wrapping/vtkWrapPython.c
index 890d142..68f9015 100644
--- a/Wrapping/vtkWrapPython.c
+++ b/Wrapping/vtkWrapPython.c
@@ -1786,28 +1786,46 @@ static void vtkWrapPython_GenerateMethodCall(
         }
       }
 
+    /* release GIL so that other Python threads can do their
+     * thing during this potentially long-running C++ method
+     * call. (cpbotha) */
+    fprintf(fp, "     PyThreadState *_save = PyEval_SaveThread();\n");
+
+    /* start of try around method invocation. first declare
+     * op variable in case of is_constructor, else this won't be
+     * available outside the try clause. (cpbotha)
+     */
     if (is_constructor)
       {
       fprintf(fp,
-              "    %s *op = new %s(",
-              data->Name, data->Name);
+              "       %s *op;\n",
+              data->Name);
+      }
+    fprintf(fp, "       try {\n");
+
+
+    if (is_constructor)
+      {
+      fprintf(fp,
+              "       op = new %s(",
+              data->Name);
       }
     else if (vtkWrap_IsVoid(currentFunction->ReturnValue))
       {
       fprintf(fp,
-              "    %s(",
+              "       %s(",
               methodname);
       }
     else if (vtkWrap_IsRef(currentFunction->ReturnValue))
       {
       fprintf(fp,
-              "    tempr = &%s(",
+              "       tempr = &%s(",
               methodname);
       }
     else
       {
       fprintf(fp,
-              "    tempr = %s(",
+              "       tempr = %s(",
               methodname);
       }
 
@@ -1851,6 +1869,32 @@ static void vtkWrapPython_GenerateMethodCall(
       }
     fprintf(fp,");\n");
 
+    /* cpbotha GIL release + vtk exceptions patch */
+    /* Call successfully completed, we have to get back the
+     * thread-lock so that we can continue Python processing. */
+    fprintf(fp, "       PyEval_RestoreThread(_save);\n");
+
+    /* check if the special OutputWindow has set Python exception
+       information... */
+    fprintf(fp, "       if (PyErr_Occurred())\n");
+    fprintf(fp, "           return NULL;\n");
+
+    /* catch clause for any possible C++ exceptions (e.g. bad_alloc) */
+    fprintf(fp, "       }\n");
+    fprintf(fp, "       catch (vtkstd::exception &_e) {\n");
+    
+    /* we can only get here by C++ exception, which means we
+     * have to get back the Python thread lock.  We do the
+     * same as Py_END_ALLOW_THREADS, but withouth the closing
+     * } */
+    
+    fprintf(fp, "          PyEval_RestoreThread(_save);\n");
+    fprintf(fp, "          PyErr_SetString(PyExc_RuntimeError, _e.what());\n");
+    fprintf(fp, "          return NULL;\n");
+    fprintf(fp, "        }\n");
+
+    /* end of cpbotha GIL release + vtk exceptions patch */
+
     /* end the "if (ap.IsBound())" clause */
     if (n == 2)
       {
@@ -4858,7 +4902,10 @@ void vtkParseOutput(FILE *fp, FileInfo *file_info)
   fprintf(fp,
           "#include \"%s.h\"\n\n",
           name);
-
+ 
+  /* C++ invocations now surrounded with try .. catch (cpbotha) */
+  fprintf(fp, "#include <vtkstd/stdexcept>\n"); 
+ 
   /* do the export of the main entry point */
   fprintf(fp,
           "#if defined(WIN32)\n"
