diff -u -r original/Graphics/vtkPolyDataConnectivityFilter.cxx new/Graphics/vtkPolyDataConnectivityFilter.cxx
--- original/Graphics/vtkPolyDataConnectivityFilter.cxx	2012-09-03 10:49:55.064600000 +0200
+++ new/Graphics/vtkPolyDataConnectivityFilter.cxx	2012-06-15 13:55:29.040151000 +0200
@@ -84,7 +84,9 @@
   vtkIdType *cells, *pts, npts, id, n;
   unsigned short ncells;
   vtkIdType maxCellsInRegion;
+  vtkIdType maxCellsIn2ndRegion;
   vtkIdType largestRegionId = 0;
+  vtkIdType secondLargestRegionId = 0;
   vtkPointData *pd=input->GetPointData(), *outputPD=output->GetPointData();
   vtkCellData *cd=input->GetCellData(), *outputCD=output->GetCellData();
   
@@ -163,6 +165,7 @@
   this->PointNumber = 0;
   this->RegionNumber = 0;
   maxCellsInRegion = 0;
+  maxCellsIn2ndRegion = 0;
 
   this->CellIds = vtkIdList::New(); 
   this->CellIds->Allocate(8, VTK_CELL_SIZE);
@@ -188,9 +191,21 @@
 
         if ( this->NumCellsInRegion > maxCellsInRegion )
           {
-          maxCellsInRegion = this->NumCellsInRegion;
-          largestRegionId = this->RegionNumber;
+			maxCellsIn2ndRegion = maxCellsInRegion;
+			maxCellsInRegion = this->NumCellsInRegion;
+		  
+			secondLargestRegionId = largestRegionId;
+			largestRegionId = this->RegionNumber;
           }
+		else
+		{
+			if ( this->NumCellsInRegion > maxCellsIn2ndRegion  && largestRegionId != this->RegionNumber)
+			{
+				maxCellsIn2ndRegion = this->NumCellsInRegion;
+				secondLargestRegionId = this->RegionNumber;
+			}
+		}
+
 
         this->RegionSizes->InsertValue(this->RegionNumber++,
                                        this->NumCellsInRegion);
@@ -324,6 +339,7 @@
   this->ExtractionMode == VTK_EXTRACT_CLOSEST_POINT_REGION ||
   this->ExtractionMode == VTK_EXTRACT_ALL_REGIONS)
     { // extract any cell that's been visited
+
     for (cellId=0; cellId < numCells; cellId++)
       {
       if ( this->Visited[cellId] >= 0 )
@@ -372,7 +388,7 @@
         }
       }
     }
-  else //extract largest region
+  else if ( this->ExtractionMode == VTK_EXTRACT_LARGEST_REGION )
     {
     for (cellId=0; cellId < numCells; cellId++)
       {
@@ -390,7 +406,26 @@
         outputCD->CopyData(cd,cellId,newCellId);
         }
       }
-   }
+  }
+  else
+	   {
+    for (cellId=0; cellId < numCells; cellId++)
+      {
+      if ( this->Visited[cellId] == secondLargestRegionId )
+        {
+        this->Mesh->GetCellPoints(cellId, npts, pts);
+        this->PointIds->Reset ();
+        for (i=0; i < npts; i++)
+          {
+          id = this->PointMap[pts[i]];
+          this->PointIds->InsertId(i,id);
+          }
+        newCellId = output->InsertNextCell(this->Mesh->GetCellType(cellId),
+                                           this->PointIds);
+        outputCD->CopyData(cd,cellId,newCellId);
+        }
+      }
+  }
 
   delete [] this->Visited;
   delete [] this->PointMap;
diff -u -r original/Graphics/vtkPolyDataConnectivityFilter.h new/Graphics/vtkPolyDataConnectivityFilter.h
--- original/Graphics/vtkPolyDataConnectivityFilter.h	2012-09-03 10:13:26.739973700 +0200
+++ new/Graphics/vtkPolyDataConnectivityFilter.h	2010-12-15 14:50:33.131037000 +0100
@@ -49,6 +49,7 @@
 #define VTK_EXTRACT_LARGEST_REGION 4
 #define VTK_EXTRACT_ALL_REGIONS 5
 #define VTK_EXTRACT_CLOSEST_POINT_REGION 6
+#define VTK_EXTRACT_SECOND_LARGEST_REGION 7
 
 class vtkDataArray;
 class vtkIdList;
@@ -81,7 +82,7 @@
   // Control the extraction of connected surfaces.
   vtkSetClampMacro(ExtractionMode,int,
                    VTK_EXTRACT_POINT_SEEDED_REGIONS,
-                   VTK_EXTRACT_CLOSEST_POINT_REGION);
+                   VTK_EXTRACT_SECOND_LARGEST_REGION);
   vtkGetMacro(ExtractionMode,int);
   void SetExtractionModeToPointSeededRegions()
     {this->SetExtractionMode(VTK_EXTRACT_POINT_SEEDED_REGIONS);};
@@ -89,6 +90,8 @@
     {this->SetExtractionMode(VTK_EXTRACT_CELL_SEEDED_REGIONS);};
   void SetExtractionModeToLargestRegion()
     {this->SetExtractionMode(VTK_EXTRACT_LARGEST_REGION);};
+  void SetExtractionModeToSecondLargestRegion()
+    {this->SetExtractionMode(VTK_EXTRACT_SECOND_LARGEST_REGION);};
   void SetExtractionModeToSpecifiedRegions()
     {this->SetExtractionMode(VTK_EXTRACT_SPECIFIED_REGIONS);};
   void SetExtractionModeToClosestPointRegion()
@@ -202,10 +205,14 @@
     {
     return "ExtractClosestPointRegion";
     }
-  else 
+  else if ( this->ExtractionMode == VTK_EXTRACT_LARGEST_REGION ) 
     {
     return "ExtractLargestRegion";
     }
+  else 
+    {
+    return "ExtractSecondLargestRegion";
+    }
 }
 
 
