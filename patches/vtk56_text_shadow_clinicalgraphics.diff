diff -u -r VTK_original/Rendering/vtkFreeTypeUtilities.cxx VTK_new/Rendering/vtkFreeTypeUtilities.cxx
--- Rendering/vtkFreeTypeUtilities.cxx	2013-02-26 11:49:11.112732700 +0100
+++ Rendering/vtkFreeTypeUtilities.cxx	2013-03-04 11:02:40.623189400 +0100
@@ -1021,19 +1021,19 @@
     tprop->GetShadowOffset(shadowOffset);
     if(shadowOffset[0] < 0)
       {
-      bbox[0] += shadowOffset[0];
+      bbox[0] += shadowOffset[0]-1;
       }
     else
       {
-      bbox[1] += shadowOffset[1];
+      bbox[1] += shadowOffset[1]+1;
       }
     if(shadowOffset[1] < 0)
       {
-      bbox[2] += shadowOffset[1];
+      bbox[2] += shadowOffset[1]-1;
       }
     else
       {
-      bbox[3] += shadowOffset[1];
+      bbox[3] += shadowOffset[1]+1;
       }
     }
   delete [] currentLine;
@@ -1245,7 +1245,7 @@
       unsigned char *glyph_ptr_row = bitmap->buffer;
       unsigned char *glyph_ptr;
 
-      float t_alpha, data_alpha, t_1_m_alpha;
+      float t_alpha, data_alpha, t_1_m_alpha, t_norm_alpha, data_norm_alpha, alpha_sum, data_r, data_g, data_b;
 
       int i, j;
       for (j = 0; j < bitmap->rows; j++)
@@ -1257,17 +1257,31 @@
           t_alpha = tprop_opacity * (*glyph_ptr / 255.0); 
           t_1_m_alpha = 1.0 - t_alpha;
           data_alpha = (data_ptr[3] - data_min) / data_range;
+
+          if (t_1_m_alpha < data_alpha)
+          {
+              data_alpha = t_1_m_alpha;
+          }
+          alpha_sum = t_alpha + data_alpha;
+          t_norm_alpha = t_alpha / alpha_sum;
+          data_norm_alpha = data_alpha / alpha_sum;
+
+          data_r = (data_ptr[0] - data_min) / data_range;
+          data_g = (data_ptr[1] - data_min) / data_range;
+          data_b = (data_ptr[2] - data_min) / data_range;
+
+
           *data_ptr = static_cast<unsigned char>(
-            data_min + data_range * tprop_r);
+            data_min + data_range * (tprop_r * t_norm_alpha + data_r * data_norm_alpha));
           data_ptr++;
           *data_ptr = static_cast<unsigned char>(
-            data_min + data_range * tprop_g);
+            data_min + data_range * (tprop_g * t_norm_alpha + data_g * data_norm_alpha));
           data_ptr++;
           *data_ptr = static_cast<unsigned char>(
-            data_min + data_range * tprop_b);
+            data_min + data_range * (tprop_b * t_norm_alpha + data_b * data_norm_alpha));
           data_ptr++;
           *data_ptr = static_cast<unsigned char>(
-            data_min + data_range * (t_alpha + data_alpha * t_1_m_alpha));
+            data_min + data_range * (alpha_sum - t_alpha * data_alpha));
           data_ptr++;
           glyph_ptr++;
           }
